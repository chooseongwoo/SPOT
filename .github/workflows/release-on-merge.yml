name: Release on PR Merge

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: write
  pull-requests: read

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git and fetch tags
        run: git fetch --tags

      - name: Get last semver tag and date
        id: get_last_tag
        run: |
          LAST_TAG=$(git tag --list '[0-9]*' --sort=-v:refname | head -n 1)
          if [ -z "$LAST_TAG" ]; then
            LAST_TAG="0.0.0"
          fi
          TAG_DATE=$(git log -1 --format=%aI "$LAST_TAG" || date -Iseconds)
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
          echo "last_tag_date=$TAG_DATE" >> $GITHUB_OUTPUT

      - name: Get merged PRs since last tag
        id: changelog
        uses: actions/github-script@v7
        with:
          script: |
            const since = new Date("${{ steps.get_last_tag.outputs.last_tag_date }}");
            const { data: prs } = await github.paginate(github.rest.pulls.list, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "closed",
              base: "main",
              per_page: 100
            });

            const mergedPRs = prs.filter(pr => pr.merged_at && new Date(pr.merged_at) > since);
            const formatted = mergedPRs.map(pr => {
              const body = pr.body?.trim() || "_No description provided._";
              return `### ${pr.title} (#${pr.number}) by @${pr.user.login}\n\n${body}`;
            });

            const changelog = formatted.join("\n\n---\n\n") || "No PRs merged since last release.";
            require('fs').writeFileSync('CHANGELOG.md', changelog);
            return changelog;
          result-encoding: string

      - name: Bump Patch Version
        id: bump
        run: |
          OLD_VERSION=${{ steps.get_last_tag.outputs.last_tag }}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$OLD_VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"

          git config user.name "Github Release Bot"
          git config user.email "cntjddn715@gmail.com"
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.bump.outputs.version }}
          name: Release ${{ steps.bump.outputs.version }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
